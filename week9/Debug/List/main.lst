###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       30/Oct/2024  22:42:09
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\pnu2\Documents\project\user\main.c
#    Command line =  
#        -f C:\Users\pnu2\AppData\Local\Temp\EW6830.tmp
#        (C:\Users\pnu2\Documents\project\user\main.c -D USE_STDPERIPH_DRIVER
#        -D STM32F10X_CL -lC C:\Users\pnu2\Documents\project\Debug\List -o
#        C:\Users\pnu2\Documents\project\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu2\Documents\project\libraries\CMSIS\DeviceSupport\ -I
#        C:\Users\pnu2\Documents\project\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu2\Documents\project\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu2\Documents\project\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu2\Documents\project\user\ -I
#        C:\Users\pnu2\Documents\project\user\inc\ -Ol -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  C:\Users\pnu2\Documents\project\Debug\List\main.lst
#    Object file  =  C:\Users\pnu2\Documents\project\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu2\Documents\project\user\main.c
      1          #include "stm32f10x.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x....             LDR.N    R1,??DataTable5  ;; 0xe000e100
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0940             LSRS     R0,R0,#+5
   \   00000016   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
      2          #include "stm32f10x_exti.h"
      3          #include "stm32f10x_gpio.h"
      4          #include "stm32f10x_usart.h"
      5          #include "stm32f10x_rcc.h"
      6          
      7          #include "misc.h"
      8          
      9          /* function prototype */
     10          void RCC_Configure(void);
     11          void GPIO_Configure(void);
     12          void USART1_Init(void);
     13          void USART2_Init(void);
     14          void NVIC_Configure(void);
     15          

   \                                 In section .text, align 2, keep-with-next
     16          void RCC_Configure(void)
     17          {  
   \                     RCC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     18              // TODO: Enable the APB2 peripheral clock using the function 'RCC_APB2PeriphClockCmd'
     19          	/* USART1 Tx(PA9)/Rx(PA10), USART2 Tx(PA2)/Rx(PA3) port clock enable */
     20          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     21          	
     22          	/* USART1, USART2 clock enable */
     23          	/* USART1 */
     24          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xF44F 0x4080      MOV      R0,#+16384
   \   00000010   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     25          	/* USART2 */
     26          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000001A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     27          	 
     28          	/* Alternate Function IO clock enable */
     29              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     30          }
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void GPIO_Configure(void)
     33          {
   \                     GPIO_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     34              GPIO_InitTypeDef GPIO_InitStructure;
     35              
     36             	// TODO: Initialize the GPIO pins using the structure 'GPIO_InitTypeDef' and the function 'GPIO_Init'
     37          	
     38          	/* Data Sheet pin definition @@*/
     39              /* USART1 pin setting */
     40              //Tx(PA9)
     41              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   \   00000002   0xF44F 0x7000      MOV      R0,#+512
   \   00000006   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     42              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000000A   0x2003             MOVS     R0,#+3
   \   0000000C   0xF88D 0x0002      STRB     R0,[SP, #+2]
     43              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   00000010   0x2018             MOVS     R0,#+24
   \   00000012   0xF88D 0x0003      STRB     R0,[SP, #+3]
     44              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000016   0x4669             MOV      R1,SP
   \   00000018   0x....             LDR.N    R0,??DataTable5_1  ;; 0x40010800
   \   0000001A   0x.... 0x....      BL       GPIO_Init
     45          	//Rx(PA10)
     46              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
   \   0000001E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000022   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     47              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   \   00000026   0x2048             MOVS     R0,#+72
   \   00000028   0xF88D 0x0003      STRB     R0,[SP, #+3]
     48              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   0000002C   0x4669             MOV      R1,SP
   \   0000002E   0x....             LDR.N    R0,??DataTable5_1  ;; 0x40010800
   \   00000030   0x.... 0x....      BL       GPIO_Init
     49          	
     50              /* USART2 pin setting */
     51              //Tx(PA2)
     52              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000034   0x2004             MOVS     R0,#+4
   \   00000036   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     53              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000003A   0x2003             MOVS     R0,#+3
   \   0000003C   0xF88D 0x0002      STRB     R0,[SP, #+2]
     54              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   00000040   0x2018             MOVS     R0,#+24
   \   00000042   0xF88D 0x0003      STRB     R0,[SP, #+3]
     55              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000046   0x4669             MOV      R1,SP
   \   00000048   0x....             LDR.N    R0,??DataTable5_1  ;; 0x40010800
   \   0000004A   0x.... 0x....      BL       GPIO_Init
     56          	//Rx(PA3)
     57              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   \   0000004E   0x2008             MOVS     R0,#+8
   \   00000050   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     58              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   \   00000054   0x2048             MOVS     R0,#+72
   \   00000056   0xF88D 0x0003      STRB     R0,[SP, #+3]
     59              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   0000005A   0x4669             MOV      R1,SP
   \   0000005C   0x....             LDR.N    R0,??DataTable5_1  ;; 0x40010800
   \   0000005E   0x.... 0x....      BL       GPIO_Init
     60          }
   \   00000062   0xBD01             POP      {R0,PC}          ;; return
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void USART1_Init(void)
     63          {
   \                     USART1_Init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     64              USART_InitTypeDef USART1_InitStructure;
     65          
     66          	// Enable the USART1 peripheral
     67          	USART_Cmd(USART1, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40013800
   \   00000006   0x.... 0x....      BL       USART_Cmd
     68          	
     69          	// TODO: Initialize the USART using the structure 'USART_InitTypeDef' and the function 'USART_Init'
     70          	USART1_InitStructure.USART_BaudRate = 9600;
   \   0000000A   0xF44F 0x5016      MOV      R0,#+9600
   \   0000000E   0x9000             STR      R0,[SP, #+0]
     71          	USART1_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     72          	USART1_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000016   0x200C             MOVS     R0,#+12
   \   00000018   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     73          	USART1_InitStructure.USART_Parity = USART_Parity_No;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     74          	USART1_InitStructure.USART_StopBits = USART_StopBits_1;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     75          	USART1_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     76          	USART_Init(USART1, &USART1_InitStructure);
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40013800
   \   00000032   0x.... 0x....      BL       USART_Init
     77          	
     78          	// TODO: Enable the USART1 RX interrupts using the function 'USART_ITConfig' and the argument value 'Receive Data register not empty interrupt'
     79          	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0xF240 0x5125      MOVW     R1,#+1317
   \   0000003C   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40013800
   \   0000003E   0x.... 0x....      BL       USART_ITConfig
     80          }
   \   00000042   0xB005             ADD      SP,SP,#+20
   \   00000044   0xBD00             POP      {PC}             ;; return
     81          

   \                                 In section .text, align 2, keep-with-next
     82          void USART2_Init(void)
     83          {
   \                     USART2_Init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     84              USART_InitTypeDef USART2_InitStructure;
     85          
     86          	// Enable the USART2 peripheral
     87          	USART_Cmd(USART2, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40004400
   \   00000006   0x.... 0x....      BL       USART_Cmd
     88          	
     89          	// TODO: Initialize the USART using the structure 'USART_InitTypeDef' and the function 'USART_Init'
     90          	USART2_InitStructure.USART_BaudRate = 9600;
   \   0000000A   0xF44F 0x5016      MOV      R0,#+9600
   \   0000000E   0x9000             STR      R0,[SP, #+0]
     91          	USART2_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     92          	USART2_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000016   0x200C             MOVS     R0,#+12
   \   00000018   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     93          	USART2_InitStructure.USART_Parity = USART_Parity_No;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     94          	USART2_InitStructure.USART_StopBits = USART_StopBits_1;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     95          	USART2_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     96          	USART_Init(USART2, &USART2_InitStructure);
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40004400
   \   00000032   0x.... 0x....      BL       USART_Init
     97          	
     98          	// TODO: Enable the USART2 RX interrupts using the function 'USART_ITConfig' and the argument value 'Receive Data register not empty interrupt'
     99          	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0xF240 0x5125      MOVW     R1,#+1317
   \   0000003C   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40004400
   \   0000003E   0x.... 0x....      BL       USART_ITConfig
    100          }
   \   00000042   0xB005             ADD      SP,SP,#+20
   \   00000044   0xBD00             POP      {PC}             ;; return
    101          

   \                                 In section .text, align 2, keep-with-next
    102          void NVIC_Configure(void) {
   \                     NVIC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    103          
    104              NVIC_InitTypeDef NVIC_InitStructure;
    105          	
    106              // TODO: fill the arg you want
    107              NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
   \   00000002   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000006   0x.... 0x....      BL       NVIC_PriorityGroupConfig
    108          
    109              // USART1
    110              // 'NVIC_EnableIRQ' is only required for USART setting
    111              NVIC_EnableIRQ(USART1_IRQn);
   \   0000000A   0x2025             MOVS     R0,#+37
   \   0000000C   0x.... 0x....      BL       __NVIC_EnableIRQ
    112              NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
   \   00000010   0x2025             MOVS     R0,#+37
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
    113              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // TODO
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    114              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // TODO
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    115              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xF88D 0x0003      STRB     R0,[SP, #+3]
    116              NVIC_Init(&NVIC_InitStructure);
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x.... 0x....      BL       NVIC_Init
    117          
    118              // USART2
    119              // 'NVIC_EnableIRQ' is only required for USART setting
    120              NVIC_EnableIRQ(USART2_IRQn);
   \   0000002E   0x2026             MOVS     R0,#+38
   \   00000030   0x.... 0x....      BL       __NVIC_EnableIRQ
    121              NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   \   00000034   0x2026             MOVS     R0,#+38
   \   00000036   0xF88D 0x0000      STRB     R0,[SP, #+0]
    122              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // TODO
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    123              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // TODO
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xF88D 0x0002      STRB     R0,[SP, #+2]
    124              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xF88D 0x0003      STRB     R0,[SP, #+3]
    125              NVIC_Init(&NVIC_InitStructure);
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x.... 0x....      BL       NVIC_Init
    126          }
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    127          

   \                                 In section .text, align 2, keep-with-next
    128          void USART1_IRQHandler() {
   \                     USART1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    129              uint16_t word;
    130              if(USART_GetITStatus(USART1,USART_IT_RXNE)!=RESET){
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40013800
   \   00000008   0x.... 0x....      BL       USART_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD00C             BEQ.N    ??USART1_IRQHandler_0
    131                  // the most recent received data by the USART1 peripheral
    132                  word = USART_ReceiveData(USART1);
   \   00000010   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40013800
   \   00000012   0x.... 0x....      BL       USART_ReceiveData
   \   00000016   0x0001             MOVS     R1,R0
    133          
    134                  // TODO implement
    135          	
    136          	USART_SendData(USART2, word);
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40004400
   \   0000001C   0x.... 0x....      BL       USART_SendData
    137          
    138                  // clear 'Read data register not empty' flag
    139              	USART_ClearITPendingBit(USART1,USART_IT_RXNE);
   \   00000020   0xF240 0x5125      MOVW     R1,#+1317
   \   00000024   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40013800
   \   00000026   0x.... 0x....      BL       USART_ClearITPendingBit
    140              }
    141          }
   \                     ??USART1_IRQHandler_0: (+1)
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    142          

   \                                 In section .text, align 2, keep-with-next
    143          void USART2_IRQHandler() {
   \                     USART2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    144              uint16_t word;
    145              if(USART_GetITStatus(USART2,USART_IT_RXNE)!=RESET){
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40004400
   \   00000008   0x.... 0x....      BL       USART_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD00C             BEQ.N    ??USART2_IRQHandler_0
    146                  // the most recent received data by the USART2 peripheral
    147                  word = USART_ReceiveData(USART2);
   \   00000010   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40004400
   \   00000012   0x.... 0x....      BL       USART_ReceiveData
   \   00000016   0x0001             MOVS     R1,R0
    148          
    149                  // TODO implement
    150          
    151          	USART_SendData(USART1, word);
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40013800
   \   0000001C   0x.... 0x....      BL       USART_SendData
    152          
    153                  // clear 'Read data register not empty' flag
    154              	USART_ClearITPendingBit(USART2, USART_IT_RXNE);
   \   00000020   0xF240 0x5125      MOVW     R1,#+1317
   \   00000024   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40004400
   \   00000026   0x.... 0x....      BL       USART_ClearITPendingBit
    155              }
    156          }
   \                     ??USART2_IRQHandler_0: (+1)
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    157          
    158          

   \                                 In section .text, align 2, keep-with-next
    159          int main(void)
    160          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    161            SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
    162            RCC_Configure();
   \   00000006   0x.... 0x....      BL       RCC_Configure
    163            GPIO_Configure();
   \   0000000A   0x.... 0x....      BL       GPIO_Configure
    164            USART1_Init();      // pc
   \   0000000E   0x.... 0x....      BL       USART1_Init
    165            USART2_Init();      // bluetooth
   \   00000012   0x.... 0x....      BL       USART2_Init
    166            NVIC_Configure();
   \   00000016   0x.... 0x....      BL       NVIC_Configure
    167          
    168            while (1) {
   \                     ??main_0: (+1)
   \   0000001A   0xE7FE             B.N      ??main_0
    169          	  
    170            }
    171            return 0;
                   ^
Warning[Pe111]: statement is unreachable
    172          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40004400         DC32     0x40004400

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   GPIO_Configure
         8   -> GPIO_Init
       8   NVIC_Configure
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
         8   -> __NVIC_EnableIRQ
       8   RCC_Configure
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
       8   USART1_IRQHandler
         8   -> USART_ClearITPendingBit
         8   -> USART_GetITStatus
         8   -> USART_ReceiveData
         8   -> USART_SendData
      24   USART1_Init
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init
       8   USART2_IRQHandler
         8   -> USART_ClearITPendingBit
         8   -> USART_GetITStatus
         8   -> USART_ReceiveData
         8   -> USART_SendData
      24   USART2_Init
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init
       0   __NVIC_EnableIRQ
       8   main
         8   -> GPIO_Configure
         8   -> NVIC_Configure
         8   -> RCC_Configure
         8   -> SystemInit
         8   -> USART1_Init
         8   -> USART2_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
     100  GPIO_Configure
      84  NVIC_Configure
      40  RCC_Configure
      44  USART1_IRQHandler
      70  USART1_Init
      44  USART2_IRQHandler
      70  USART2_Init
      28  __NVIC_EnableIRQ
      28  main

 
 524 bytes in section .text
 
 524 bytes of CODE memory

Errors: none
Warnings: 1
