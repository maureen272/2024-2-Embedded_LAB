###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       16/Oct/2024  20:51:05
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\pnu2\Downloads\@@_@@_@@\user\main.c
#    Command line =  
#        -f C:\Users\pnu2\AppData\Local\Temp\EWB8CF.tmp
#        (C:\Users\pnu2\Downloads\@@_@@_@@\user\main.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu2\Documents\week7\Debug\List -o
#        C:\Users\pnu2\Documents\week7\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu2\Documents\week7\libraries\CMSIS\DeviceSupport\ -I
#        C:\Users\pnu2\Documents\week7\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu2\Documents\week7\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu2\Documents\week7\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu2\Documents\week7\user\ -I
#        C:\Users\pnu2\Documents\week7\user\inc\ -Ol -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  C:\Users\pnu2\Documents\week7\Debug\List\main.lst
#    Object file  =  C:\Users\pnu2\Documents\week7\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu2\Downloads\@@_@@_@@\user\main.c
      1          #include "stm32f10x.h"		

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x....             LDR.N    R1,??DataTable8  ;; 0xe000e100
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0940             LSRS     R0,R0,#+5
   \   00000016   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
      2          #include "stm32f10x_exti.h"	 
      3          #include "stm32f10x_gpio.h"	
      4          #include "stm32f10x_usart.h"
      5          #include "stm32f10x_rcc.h"	 
      6          #include "misc.h"			
      7          
      8          
      9          void RCC_Configure(void);
     10          void GPIO_Configure(void);
     11          void EXTI_Configure(void);
     12          void USART1_Init(void);
     13          void NVIC_Configure(void);
     14          
     15          void EXTI15_10_IRQHandler(void);
     16          void Delay(void);
     17          void sendDataUART1(uint16_t data);
     18          

   \                                 In section .data, align 4
     19          int direction = 1; 
   \                     direction:
   \   00000000   0x00000001         DC32 1
     20          
     21          // RCC @@ @@

   \                                 In section .text, align 2, keep-with-next
     22          void RCC_Configure(void)
     23          {
   \                     RCC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     24          	// TODO: APB2 @@ @@ @@ @@@
     25          	/* UART TX/RX @@ @@ @@@ */
     26          
     27          	/* @@(KEY1, KEY2, KEY3) @@ @@ @@@ */
     28          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     29          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE); // KEY1(PC4)
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2010             MOVS     R0,#+16
   \   0000000E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     30          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); // KEY2(PB10)
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2008             MOVS     R0,#+8
   \   00000016   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     31          
     32          	/* LED @@ @@ @@@ */
     33          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     34          
     35          	/* USART1 @@ @@@ */
     36          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0xF44F 0x4080      MOV      R0,#+16384
   \   00000028   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     37          
     38          	/* @@ @@ IO @@ @@@ */
     39          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     40          }
   \   00000034   0xBD01             POP      {R0,PC}          ;; return
     41          
     42          // GPIO @@ @@

   \                                 In section .text, align 2, keep-with-next
     43          void GPIO_Configure(void)
     44          {
   \                     GPIO_Configure: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     45          	/* TODO: GPIO @ @@@ */
     46          
     47          	// KEY1@ KEY3 @@@ @@ GPIO @@
     48          	GPIO_InitTypeDef KEY1_3_InitStructure;					
     49          	KEY1_3_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_13; 
   \   00000004   0xF242 0x0010      MOVW     R0,#+8208
   \   00000008   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     50          	KEY1_3_InitStructure.GPIO_Mode = GPIO_Mode_IPU;			  
   \   0000000C   0x2048             MOVS     R0,#+72
   \   0000000E   0xF88D 0x0013      STRB     R0,[SP, #+19]
     51          	GPIO_Init(GPIOC, &KEY1_3_InitStructure);			
   \   00000012   0xA904             ADD      R1,SP,#+16
   \   00000014   0x....             LDR.N    R0,??DataTable8_1  ;; 0x40011000
   \   00000016   0x.... 0x....      BL       GPIO_Init
     52          
     53          	// KEY2 @@@ @@ GPIO @@
     54          	GPIO_InitTypeDef KEY2_InitStructure;		  
     55          	KEY2_InitStructure.GPIO_Pin = GPIO_Pin_10;	
   \   0000001A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000001E   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     56          	KEY2_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 
   \   00000022   0x2048             MOVS     R0,#+72
   \   00000024   0xF88D 0x000F      STRB     R0,[SP, #+15]
     57          	GPIO_Init(GPIOB, &KEY2_InitStructure);		
   \   00000028   0xA903             ADD      R1,SP,#+12
   \   0000002A   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40010c00
   \   0000002C   0x.... 0x....      BL       GPIO_Init
     58          
     59          	/* LED @ @@ */
     60          	GPIO_InitTypeDef LED_InitStructure;												
     61          	LED_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_7; // GPIOD@ @ 2, 3, 4, 7@ @@@@ LED @@
   \   00000030   0x209C             MOVS     R0,#+156
   \   00000032   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     62          	LED_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;								
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0xF88D 0x000A      STRB     R0,[SP, #+10]
     63          	LED_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;								
   \   0000003C   0x2010             MOVS     R0,#+16
   \   0000003E   0xF88D 0x000B      STRB     R0,[SP, #+11]
     64          	GPIO_Init(GPIOD, &LED_InitStructure);									
   \   00000042   0xA902             ADD      R1,SP,#+8
   \   00000044   0x....             LDR.N    R0,??DataTable8_3  ;; 0x40011400
   \   00000046   0x.... 0x....      BL       GPIO_Init
     65          
     66          	/* UART @ @@ */
     67          	GPIO_InitTypeDef TX_InitStructure;			
     68          	TX_InitStructure.GPIO_Pin = GPIO_Pin_9;			
   \   0000004A   0xF44F 0x7000      MOV      R0,#+512
   \   0000004E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     69          	TX_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
   \   00000052   0x2003             MOVS     R0,#+3
   \   00000054   0xF88D 0x0006      STRB     R0,[SP, #+6]
     70          	TX_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	
   \   00000058   0x2018             MOVS     R0,#+24
   \   0000005A   0xF88D 0x0007      STRB     R0,[SP, #+7]
     71          	GPIO_Init(GPIOA, &TX_InitStructure);		
   \   0000005E   0xA901             ADD      R1,SP,#+4
   \   00000060   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40010800
   \   00000062   0x.... 0x....      BL       GPIO_Init
     72          
     73          	// RX @ (PA10)@ @@ GPIO @@
     74          	GPIO_InitTypeDef RX_InitStructure;			
     75          	RX_InitStructure.GPIO_Pin = GPIO_Pin_10;		
   \   00000066   0xF44F 0x6080      MOV      R0,#+1024
   \   0000006A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     76          	RX_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
   \   0000006E   0x2003             MOVS     R0,#+3
   \   00000070   0xF88D 0x0002      STRB     R0,[SP, #+2]
     77          	RX_InitStructure.GPIO_Mode = GPIO_Mode_IPU;		
   \   00000074   0x2048             MOVS     R0,#+72
   \   00000076   0xF88D 0x0003      STRB     R0,[SP, #+3]
     78          	GPIO_Init(GPIOA, &RX_InitStructure);			
   \   0000007A   0x4669             MOV      R1,SP
   \   0000007C   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40010800
   \   0000007E   0x.... 0x....      BL       GPIO_Init
     79          }
   \   00000082   0xB005             ADD      SP,SP,#+20
   \   00000084   0xBD00             POP      {PC}             ;; return
     80          
     81          // EXTI @@ @@

   \                                 In section .text, align 2, keep-with-next
     82          void EXTI_Configure(void)
     83          {
   \                     EXTI_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
     84          	EXTI_InitTypeDef EXTI_InitStructure;
     85          
     86          	/* KEY1 @@ @@ */
     87          	GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource4);
   \   00000004   0x2104             MOVS     R1,#+4
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0x.... 0x....      BL       GPIO_EXTILineConfig
     88          	EXTI_InitStructure.EXTI_Line = EXTI_Line4;
   \   0000000C   0x2010             MOVS     R0,#+16
   \   0000000E   0x9004             STR      R0,[SP, #+16]
     89          	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0014      STRB     R0,[SP, #+20]
     90          	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
   \   00000016   0x200C             MOVS     R0,#+12
   \   00000018   0xF88D 0x0015      STRB     R0,[SP, #+21]
     91          	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xF88D 0x0016      STRB     R0,[SP, #+22]
     92          	EXTI_Init(&EXTI_InitStructure);
   \   00000022   0xA804             ADD      R0,SP,#+16
   \   00000024   0x.... 0x....      BL       EXTI_Init
     93          
     94          	/* KEY2 @@ @@ */
     95          	EXTI_InitTypeDef Key2_InitStructure;
     96          	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource10);
   \   00000028   0x210A             MOVS     R1,#+10
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       GPIO_EXTILineConfig
     97          	Key2_InitStructure.EXTI_Line = EXTI_Line10;
   \   00000030   0xF44F 0x6080      MOV      R0,#+1024
   \   00000034   0x9002             STR      R0,[SP, #+8]
     98          	Key2_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF88D 0x000C      STRB     R0,[SP, #+12]
     99          	Key2_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
   \   0000003C   0x200C             MOVS     R0,#+12
   \   0000003E   0xF88D 0x000D      STRB     R0,[SP, #+13]
    100          	Key2_InitStructure.EXTI_LineCmd = ENABLE;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xF88D 0x000E      STRB     R0,[SP, #+14]
    101          	EXTI_Init(&Key2_InitStructure);
   \   00000048   0xA802             ADD      R0,SP,#+8
   \   0000004A   0x.... 0x....      BL       EXTI_Init
    102          
    103          	/* KEY3 @@ @@ */
    104          	EXTI_InitTypeDef Key3_InitStructure;
    105          	GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource13);
   \   0000004E   0x210D             MOVS     R1,#+13
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x.... 0x....      BL       GPIO_EXTILineConfig
    106          	Key3_InitStructure.EXTI_Line = EXTI_Line13;
   \   00000056   0xF44F 0x5000      MOV      R0,#+8192
   \   0000005A   0x9000             STR      R0,[SP, #+0]
    107          	Key3_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xF88D 0x0004      STRB     R0,[SP, #+4]
    108          	Key3_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
   \   00000062   0x200C             MOVS     R0,#+12
   \   00000064   0xF88D 0x0005      STRB     R0,[SP, #+5]
    109          	Key3_InitStructure.EXTI_LineCmd = ENABLE;
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0xF88D 0x0006      STRB     R0,[SP, #+6]
    110          	EXTI_Init(&Key3_InitStructure);
   \   0000006E   0x4668             MOV      R0,SP
   \   00000070   0x.... 0x....      BL       EXTI_Init
    111          }
   \   00000074   0xB007             ADD      SP,SP,#+28
   \   00000076   0xBD00             POP      {PC}             ;; return
    112          
    113          // USART1 @@@ @@

   \                                 In section .text, align 2, keep-with-next
    114          void USART1_Init(void)
    115          {
   \                     USART1_Init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    116          	USART_InitTypeDef USART1_InitStructure;
    117          
    118          	// USART1 @@@
    119          	USART_Cmd(USART1, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   00000006   0x.... 0x....      BL       USART_Cmd
    120          
    121          	// TODO: USART @@ @@@
    122          	USART1_InitStructure.USART_BaudRate = 9600;									
   \   0000000A   0xF44F 0x5016      MOV      R0,#+9600
   \   0000000E   0x9000             STR      R0,[SP, #+0]
    123          	USART1_InitStructure.USART_WordLength = USART_WordLength_8b;					 
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    124          	USART1_InitStructure.USART_StopBits = USART_StopBits_1;						
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    125          	USART1_InitStructure.USART_Parity = USART_Parity_No;							
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    126          	USART1_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;				
   \   00000022   0x200C             MOVS     R0,#+12
   \   00000024   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    127          	USART1_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; 
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    128          	USART_Init(USART1, &USART1_InitStructure);
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   00000032   0x.... 0x....      BL       USART_Init
    129          
    130          	// TODO: USART1 @@ @@@@ @@@
    131          	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0xF240 0x5125      MOVW     R1,#+1317
   \   0000003C   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   0000003E   0x.... 0x....      BL       USART_ITConfig
    132          }
   \   00000042   0xB005             ADD      SP,SP,#+20
   \   00000044   0xBD00             POP      {PC}             ;; return
    133          
    134          // NVIC @@ @@

   \                                 In section .text, align 2, keep-with-next
    135          void NVIC_Configure(void)
    136          {
   \                     NVIC_Configure: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    137          	NVIC_InitTypeDef NVIC_InitStructure;
    138          	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
   \   00000002   0xF44F 0x60E0      MOV      R0,#+1792
   \   00000006   0x.... 0x....      BL       NVIC_PriorityGroupConfig
    139          
    140          	// KEY1 @@@@ @@
    141          	NVIC_InitTypeDef KEY1_InitStructure;
    142          	KEY1_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;
   \   0000000A   0x200A             MOVS     R0,#+10
   \   0000000C   0xF88D 0x0008      STRB     R0,[SP, #+8]
    143          	KEY1_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0009      STRB     R0,[SP, #+9]
    144          	KEY1_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x000A      STRB     R0,[SP, #+10]
    145          	KEY1_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xF88D 0x000B      STRB     R0,[SP, #+11]
    146          	NVIC_Init(&KEY1_InitStructure);
   \   00000022   0xA802             ADD      R0,SP,#+8
   \   00000024   0x.... 0x....      BL       NVIC_Init
    147          
    148          	// KEY2 @@@@ @@
    149          	NVIC_InitTypeDef KEY2_InitStructure;
    150          	KEY2_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
   \   00000028   0x2028             MOVS     R0,#+40
   \   0000002A   0xF88D 0x0004      STRB     R0,[SP, #+4]
    151          	KEY2_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF88D 0x0005      STRB     R0,[SP, #+5]
    152          	KEY2_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xF88D 0x0006      STRB     R0,[SP, #+6]
    153          	KEY2_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xF88D 0x0007      STRB     R0,[SP, #+7]
    154          	NVIC_Init(&KEY2_InitStructure);
   \   00000040   0xA801             ADD      R0,SP,#+4
   \   00000042   0x.... 0x....      BL       NVIC_Init
    155          
    156          	// KEY3 @@@@ @@
    157          	NVIC_InitTypeDef KEY3_InitStructure;
    158          	KEY3_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
   \   00000046   0x2028             MOVS     R0,#+40
   \   00000048   0xF88D 0x0000      STRB     R0,[SP, #+0]
    159          	KEY3_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    160          	KEY3_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xF88D 0x0002      STRB     R0,[SP, #+2]
    161          	KEY3_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    162          	NVIC_Init(&KEY3_InitStructure);
   \   0000005E   0x4668             MOV      R0,SP
   \   00000060   0x.... 0x....      BL       NVIC_Init
    163          
    164          	// UART1 @@@@ @@
    165          	NVIC_EnableIRQ(USART1_IRQn);
   \   00000064   0x2025             MOVS     R0,#+37
   \   00000066   0x.... 0x....      BL       __NVIC_EnableIRQ
    166          	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
   \   0000006A   0x2025             MOVS     R0,#+37
   \   0000006C   0xF88D 0x000C      STRB     R0,[SP, #+12]
    167          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0xF88D 0x000D      STRB     R0,[SP, #+13]
    168          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xF88D 0x000E      STRB     R0,[SP, #+14]
    169          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0xF88D 0x000F      STRB     R0,[SP, #+15]
    170          	NVIC_Init(&NVIC_InitStructure);
   \   00000082   0xA803             ADD      R0,SP,#+12
   \   00000084   0x.... 0x....      BL       NVIC_Init
    171          }
   \   00000088   0xB005             ADD      SP,SP,#+20
   \   0000008A   0xBD00             POP      {PC}             ;; return
    172          
    173          // USART1 @@@@ @@@

   \                                 In section .text, align 2, keep-with-next
    174          void USART1_IRQHandler()
    175          {
   \                     USART1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    176          	uint16_t word;
    177          	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   00000008   0x.... 0x....      BL       USART_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD01C             BEQ.N    ??USART1_IRQHandler_0
    178          	{
    179          		word = USART_ReceiveData(USART1);
   \   00000010   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   00000012   0x.... 0x....      BL       USART_ReceiveData
    180          
    181          		if (word == 'a')
   \   00000016   0x0001             MOVS     R1,R0
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x2961             CMP      R1,#+97
   \   0000001C   0xD106             BNE.N    ??USART1_IRQHandler_1
    182          		{
    183          			sendDataUART1('a');
   \   0000001E   0x2061             MOVS     R0,#+97
   \   00000020   0x.... 0x....      BL       sendDataUART1
    184          			direction = 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable8_6
   \   00000028   0x6008             STR      R0,[R1, #+0]
   \   0000002A   0xE009             B.N      ??USART1_IRQHandler_2
    185          		}
    186          		else if (word == 'b')
   \                     ??USART1_IRQHandler_1: (+1)
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0x2862             CMP      R0,#+98
   \   00000030   0xD106             BNE.N    ??USART1_IRQHandler_2
    187          		{
    188          			sendDataUART1('b');
   \   00000032   0x2062             MOVS     R0,#+98
   \   00000034   0x.... 0x....      BL       sendDataUART1
    189          			direction = -1;
   \   00000038   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000003C   0x....             LDR.N    R1,??DataTable8_6
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    190          		}
    191          
    192          		USART_ClearITPendingBit(USART1, USART_IT_RXNE);
   \                     ??USART1_IRQHandler_2: (+1)
   \   00000040   0xF240 0x5125      MOVW     R1,#+1317
   \   00000044   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   00000046   0x.... 0x....      BL       USART_ClearITPendingBit
    193          	}
    194          }
   \                     ??USART1_IRQHandler_0: (+1)
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
    195          

   \                                 In section .text, align 2, keep-with-next
    196          void EXTI15_10_IRQHandler(void)
    197          {
   \                     EXTI15_10_IRQHandler: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
    198          	if (EXTI_GetITStatus(EXTI_Line10) != RESET)
   \   00000002   0xF44F 0x6080      MOV      R0,#+1024
   \   00000006   0x.... 0x....      BL       EXTI_GetITStatus
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD00E             BEQ.N    ??EXTI15_10_IRQHandler_0
    199          	{
    200          		if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_10) == Bit_RESET)
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40010c00
   \   00000014   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD103             BNE.N    ??EXTI15_10_IRQHandler_1
    201          		{
    202          			direction = -1; 
   \   0000001C   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000020   0x....             LDR.N    R1,??DataTable8_6
   \   00000022   0x6008             STR      R0,[R1, #+0]
    203          		}
    204          		EXTI_ClearITPendingBit(EXTI_Line10); 
   \                     ??EXTI15_10_IRQHandler_1: (+1)
   \   00000024   0xF44F 0x6080      MOV      R0,#+1024
   \   00000028   0x.... 0x....      BL       EXTI_ClearITPendingBit
    205          	}
    206          
    207          	if (EXTI_GetITStatus(EXTI_Line13) != RESET)
   \                     ??EXTI15_10_IRQHandler_0: (+1)
   \   0000002C   0xF44F 0x5000      MOV      R0,#+8192
   \   00000030   0x.... 0x....      BL       EXTI_GetITStatus
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD01A             BEQ.N    ??EXTI15_10_IRQHandler_2
    208          	{
    209          		if (GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == Bit_RESET)
   \   00000038   0xF44F 0x5100      MOV      R1,#+8192
   \   0000003C   0x....             LDR.N    R0,??DataTable8_1  ;; 0x40011000
   \   0000003E   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD10F             BNE.N    ??EXTI15_10_IRQHandler_3
    210          		{
    211          			char msg[] = "Team02\r\n";
   \   00000046   0x4668             MOV      R0,SP
   \   00000048   0x....             LDR.N    R1,??DataTable8_7
   \   0000004A   0xE891 0x001C      LDM      R1,{R2-R4}
   \   0000004E   0xE880 0x001C      STM      R0,{R2-R4}
    212          			for (int i = 0; i < sizeof(msg); i++)
   \   00000052   0x2400             MOVS     R4,#+0
   \   00000054   0xE005             B.N      ??EXTI15_10_IRQHandler_4
    213          			{
    214          				sendDataUART1(msg[i]);
   \                     ??EXTI15_10_IRQHandler_5: (+1)
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x5D00             LDRB     R0,[R0, R4]
   \   0000005A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005C   0x.... 0x....      BL       sendDataUART1
    215          			}
   \   00000060   0x1C64             ADDS     R4,R4,#+1
   \                     ??EXTI15_10_IRQHandler_4: (+1)
   \   00000062   0x2C09             CMP      R4,#+9
   \   00000064   0xD3F7             BCC.N    ??EXTI15_10_IRQHandler_5
    216          		}
    217          		EXTI_ClearITPendingBit(EXTI_Line13); 
   \                     ??EXTI15_10_IRQHandler_3: (+1)
   \   00000066   0xF44F 0x5000      MOV      R0,#+8192
   \   0000006A   0x.... 0x....      BL       EXTI_ClearITPendingBit
    218          	}
    219          }
   \                     ??EXTI15_10_IRQHandler_2: (+1)
   \   0000006E   0xBD1F             POP      {R0-R4,PC}       ;; return
    220          

   \                                 In section .text, align 2, keep-with-next
    221          void EXTI4_IRQHandler(void)
    222          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    223          	if (EXTI_GetITStatus(EXTI_Line4) != RESET)
   \   00000002   0x2010             MOVS     R0,#+16
   \   00000004   0x.... 0x....      BL       EXTI_GetITStatus
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD00B             BEQ.N    ??EXTI4_IRQHandler_0
    224          	{
    225          		if (GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_4) == Bit_RESET)
   \   0000000C   0x2110             MOVS     R1,#+16
   \   0000000E   0x....             LDR.N    R0,??DataTable8_1  ;; 0x40011000
   \   00000010   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD102             BNE.N    ??EXTI4_IRQHandler_1
    226          		{
    227          			direction = 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR.N    R1,??DataTable8_6
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    228          		}
    229          		EXTI_ClearITPendingBit(EXTI_Line4); 
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   0000001E   0x2010             MOVS     R0,#+16
   \   00000020   0x.... 0x....      BL       EXTI_ClearITPendingBit
    230          	}
    231          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    232          

   \                                 In section .text, align 2, keep-with-next
    233          void Delay(void)
    234          {
    235          	int i;
    236          
    237          	for (i = 0; i < 2000000; i++)
   \                     Delay: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE000             B.N      ??Delay_0
   \                     ??Delay_1: (+1)
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \                     ??Delay_0: (+1)
   \   00000006   0x....             LDR.N    R1,??DataTable8_8  ;; 0x1e8480
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xDBFB             BLT.N    ??Delay_1
    238          	{
    239          	}
    240          }
   \   0000000C   0x4770             BX       LR               ;; return
    241          

   \                                 In section .text, align 2, keep-with-next
    242          void sendDataUART1(uint16_t data)
    243          {
   \                     sendDataUART1: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    244          	while ((USART1->SR & USART_SR_TC) == 0)
   \                     ??sendDataUART1_0: (+1)
   \   00000004   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD5FB             BPL.N    ??sendDataUART1_0
    245          		;
    246          	USART_SendData(USART1, data);
   \   0000000C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000E   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   00000010   0x.... 0x....      BL       USART_SendData
    247          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    248          

   \                                 In section .text, align 2, keep-with-next
    249          int main(void)
    250          {
   \                     main: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    251          	SystemInit(); 
   \   00000002   0x.... 0x....      BL       SystemInit
    252          
    253          	RCC_Configure(); 
   \   00000006   0x.... 0x....      BL       RCC_Configure
    254          
    255          	GPIO_Configure(); 
   \   0000000A   0x.... 0x....      BL       GPIO_Configure
    256          
    257          	EXTI_Configure(); 
   \   0000000E   0x.... 0x....      BL       EXTI_Configure
    258          
    259          	USART1_Init();
   \   00000012   0x.... 0x....      BL       USART1_Init
    260          
    261          	NVIC_Configure(); 
   \   00000016   0x.... 0x....      BL       NVIC_Configure
    262          
    263          	uint16_t pins[] = {GPIO_Pin_2, GPIO_Pin_3, GPIO_Pin_4, GPIO_Pin_7}; 
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x....             LDR.N    R1,??DataTable8_9
   \   0000001E   0xE9D1 0x2300      LDRD     R2,R3,[R1, #+0]
   \   00000022   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
    264          
    265          	int led = 1;
   \   00000026   0x2401             MOVS     R4,#+1
    266          	while (1)
    267          	{
    268          		GPIO_SetBits(GPIOD, GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_7);
   \                     ??main_0: (+1)
   \   00000028   0x219C             MOVS     R1,#+156
   \   0000002A   0x....             LDR.N    R0,??DataTable8_3  ;; 0x40011400
   \   0000002C   0x.... 0x....      BL       GPIO_SetBits
    269          
    270          		led += direction;	
   \   00000030   0x....             LDR.N    R0,??DataTable8_6
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x1904             ADDS     R4,R0,R4
    271          		led = (led + 4) % 4; 
   \   00000036   0x1D24             ADDS     R4,R4,#+4
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x2104             MOVS     R1,#+4
   \   0000003C   0xFB90 0xF4F1      SDIV     R4,R0,R1
   \   00000040   0xFB01 0x0414      MLS      R4,R1,R4,R0
    272          
    273          		GPIO_ResetBits(GPIOD, pins[led]); 
   \   00000044   0x4668             MOV      R0,SP
   \   00000046   0xF830 0x1014      LDRH     R1,[R0, R4, LSL #+1]
   \   0000004A   0x....             LDR.N    R0,??DataTable8_3  ;; 0x40011400
   \   0000004C   0x.... 0x....      BL       GPIO_ResetBits
    274          		Delay();						
   \   00000050   0x.... 0x....      BL       Delay
   \   00000054   0xE7E8             B.N      ??main_0
    275          	}
    276          
    277          	return 0;
                 	^
Warning[Pe111]: statement is unreachable
    278          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     direction

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x001E8480         DC32     0x1e8480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x54 0x65          DC8 "Team02\015\012"
   \              0x61 0x6D    
   \              0x30 0x32    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0004 0x0008      DC16 4, 8, 16, 128
   \              0x0010 0x0080

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Delay
      24   EXTI15_10_IRQHandler
        24   -> EXTI_ClearITPendingBit
        24   -> EXTI_GetITStatus
        24   -> GPIO_ReadInputDataBit
        24   -> sendDataUART1
       8   EXTI4_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> GPIO_ReadInputDataBit
      32   EXTI_Configure
        32   -> EXTI_Init
        32   -> GPIO_EXTILineConfig
      24   GPIO_Configure
        24   -> GPIO_Init
      24   NVIC_Configure
        24   -> NVIC_Init
        24   -> NVIC_PriorityGroupConfig
        24   -> __NVIC_EnableIRQ
       8   RCC_Configure
         8   -> RCC_APB2PeriphClockCmd
       8   USART1_IRQHandler
         8   -> USART_ClearITPendingBit
         8   -> USART_GetITStatus
         8   -> USART_ReceiveData
         8   -> sendDataUART1
      24   USART1_Init
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init
       0   __NVIC_EnableIRQ
      16   main
        16   -> Delay
        16   -> EXTI_Configure
        16   -> GPIO_Configure
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> NVIC_Configure
        16   -> RCC_Configure
        16   -> SystemInit
        16   -> USART1_Init
       8   sendDataUART1
         8   -> USART_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      12  ?_0
       8  ?_1
      14  Delay
     112  EXTI15_10_IRQHandler
      38  EXTI4_IRQHandler
     120  EXTI_Configure
     134  GPIO_Configure
     140  NVIC_Configure
      54  RCC_Configure
      76  USART1_IRQHandler
      70  USART1_Init
      28  __NVIC_EnableIRQ
       4  direction
      86  main
      22  sendDataUART1

 
   4 bytes in section .data
  20 bytes in section .rodata
 934 bytes in section .text
 
 934 bytes of CODE  memory
  20 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: 1
