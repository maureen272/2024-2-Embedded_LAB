###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       06/Nov/2024  20:43:31
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\pnu2\Documents\project_test\user\main.c
#    Command line =  
#        -f C:\Users\pnu2\AppData\Local\Temp\EW30C0.tmp
#        (C:\Users\pnu2\Documents\project_test\user\main.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu2\Documents\project_test\Debug\List -o
#        C:\Users\pnu2\Documents\project_test\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu2\Documents\project_test\libraries\CMSIS\DeviceSupport\ -I
#        C:\Users\pnu2\Documents\project_test\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu2\Documents\project_test\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu2\Documents\project_test\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu2\Documents\project_test\libraries\LCD\ -I
#        C:\Users\pnu2\Documents\project_test\user\ -I
#        C:\Users\pnu2\Documents\project_test\user\inc\ -Ol -I "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  C:\Users\pnu2\Documents\project_test\Debug\List\main.lst
#    Object file  =  C:\Users\pnu2\Documents\project_test\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu2\Documents\project_test\user\main.c
      1          #include "stm32f10x.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x....             LDR.N    R1,??DataTable4_2  ;; 0xe000e100
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x0940             LSRS     R0,R0,#+5
   \   00000016   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
      2          #include "core_cm3.h"
      3          #include "misc.h"
      4          #include "stm32f10x_exti.h"
      5          #include "stm32f10x_gpio.h"
      6          #include "stm32f10x_usart.h"
      7          #include "stm32f10x_rcc.h"
      8          #include "stm32f10x_adc.h"
      9          #include "lcd.h"
     10          #include "touch.h"
     11          
     12          #define LCD_TEAM_NAME_X 40
     13          #define LCD_TEAM_NAME_Y 50
     14          #define LCD_COORD_X_X 100
     15          #define LCD_COORD_X_Y 80
     16          #define LCD_COORD_Y_X 100
     17          #define LCD_COORD_Y_Y 100
     18          #define LCD_LUX_VAL_X 70
     19          #define LCD_LUX_VAL_Y 130
     20          

   \                                 In section .data, align 4
     21          int color[12] = {WHITE,CYAN,BLUE,RED,MAGENTA,LGRAY,GREEN,YELLOW,BROWN,BRRED,GRAY};
   \                     color:
   \   00000000   0x0000FFFF         DC32 65535, 32767, 31, 63488, 63519, 50712, 2016, 65504, 48192, 64519
   \              0x00007FFF   
   \              0x0000001F   
   \              0x0000F800   
   \              0x0000F81F   
   \              0x0000C618   
   \              0x000007E0   
   \              0x0000FFE0   
   \              0x0000BC40   
   \              0x0000FC07   
   \   00000028   0x00008430         DC32 33840
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
     22          
     23          void RCC_Configure(void);
     24          void GPIO_Configure(void);
     25          void ADC_Configure(void);
     26          void NVIC_Configure(void);
     27          void ADC1_2_IRQHandler(void);
     28          void Delay(void);
     29          

   \                                 In section .bss, align 2
     30          uint16_t cur_x, cur_y, pixel_x, pixel_y;
   \                     cur_x:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     cur_y:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     pixel_x:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     pixel_y:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     31          uint16_t value=0;       //value of photo resistor
   \                     value:
   \   00000000                      DS8 2
     32          

   \                                 In section .text, align 2, keep-with-next
     33          void RCC_Configure(void)
     34          {
   \                     RCC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     35              //Enable the APB2 peripheral clock using the function 'RCC_APB2PeriphClockCmd'
     36              RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF44F 0x7000      MOV      R0,#+512
   \   00000008   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     37              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2010             MOVS     R0,#+16
   \   00000010   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     38              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2020             MOVS     R0,#+32
   \   00000018   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     39              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2008             MOVS     R0,#+8
   \   00000020   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     40              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     41          }
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void GPIO_Configure(void)
     44          {
   \                     GPIO_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     45              GPIO_InitTypeDef GPIO_ADC;
     46          
     47              //Initialize the GPIO pins using the structure 'GPIO_InitTypeDef' and the function 'GPIO_Init'
     48              GPIO_ADC.GPIO_Pin = GPIO_Pin_0;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     49              GPIO_ADC.GPIO_Mode = GPIO_Mode_AIN;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     50              GPIO_ADC.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0xF88D 0x0002      STRB     R0,[SP, #+2]
     51              GPIO_Init(GPIOB, &GPIO_ADC);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40010c00
   \   00000018   0x.... 0x....      BL       GPIO_Init
     52          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     53          void NVIC_Configure(void) {
   \                     NVIC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     54              NVIC_InitTypeDef NVIC_ADC;
     55          
     56              NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
   \   00000002   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000006   0x.... 0x....      BL       NVIC_PriorityGroupConfig
     57              //Initialize the NVIC using the structure 'NVIC_InitTypeDef' and the function 'NVIC_Init'
     58          
     59              NVIC_EnableIRQ(ADC1_2_IRQn);
   \   0000000A   0x2012             MOVS     R0,#+18
   \   0000000C   0x.... 0x....      BL       __NVIC_EnableIRQ
     60              NVIC_ADC.NVIC_IRQChannel = ADC1_2_IRQn;
   \   00000010   0x2012             MOVS     R0,#+18
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
     61              NVIC_ADC.NVIC_IRQChannelPreemptionPriority = 0x0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
     62              NVIC_ADC.NVIC_IRQChannelSubPriority = 0x0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF88D 0x0002      STRB     R0,[SP, #+2]
     63              NVIC_ADC.NVIC_IRQChannelCmd = ENABLE;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xF88D 0x0003      STRB     R0,[SP, #+3]
     64          
     65              NVIC_Init(&NVIC_ADC);
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x.... 0x....      BL       NVIC_Init
     66          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
     67          

   \                                 In section .text, align 2, keep-with-next
     68          void ADC_Configure(void) {
   \                     ADC_Configure: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     69              ADC_InitTypeDef ADC;
     70          
     71              ADC.ADC_Mode = ADC_Mode_Independent ;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
     72              ADC.ADC_ContinuousConvMode = ENABLE;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xF88D 0x0005      STRB     R0,[SP, #+5]
     73              ADC.ADC_DataAlign = ADC_DataAlign_Right;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9003             STR      R0,[SP, #+12]
     74              ADC.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \   00000012   0xF45F 0x2060      MOVS     R0,#+917504
   \   00000016   0x9002             STR      R0,[SP, #+8]
     75              ADC.ADC_NbrOfChannel = 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xF88D 0x0010      STRB     R0,[SP, #+16]
     76              ADC.ADC_ScanConvMode = DISABLE;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x0004      STRB     R0,[SP, #+4]
     77              
     78              ADC_Init(ADC1, &ADC);
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000028   0x.... 0x....      BL       ADC_Init
     79              ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 1, ADC_SampleTime_239Cycles5);
   \   0000002C   0x2307             MOVS     R3,#+7
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0x2108             MOVS     R1,#+8
   \   00000032   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000034   0x.... 0x....      BL       ADC_RegularChannelConfig
     80              ADC_ITConfig(ADC1,  ADC_IT_EOC, ENABLE );
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0xF44F 0x7108      MOV      R1,#+544
   \   0000003E   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000040   0x.... 0x....      BL       ADC_ITConfig
     81              ADC_Cmd(ADC1, ENABLE);
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000048   0x.... 0x....      BL       ADC_Cmd
     82              
     83              ADC_ResetCalibration(ADC1);
   \   0000004C   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   0000004E   0x.... 0x....      BL       ADC_ResetCalibration
     84              while(ADC_GetResetCalibrationStatus(ADC1)) ;
   \                     ??ADC_Configure_0: (+1)
   \   00000052   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000054   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD1FA             BNE.N    ??ADC_Configure_0
     85          
     86              ADC_StartCalibration(ADC1);
   \   0000005C   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   0000005E   0x.... 0x....      BL       ADC_StartCalibration
     87              while(ADC_GetCalibrationStatus(ADC1)) ;
   \                     ??ADC_Configure_1: (+1)
   \   00000062   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000064   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD1FA             BNE.N    ??ADC_Configure_1
     88          
     89              ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000070   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
     90          }
   \   00000074   0xB005             ADD      SP,SP,#+20
   \   00000076   0xBD00             POP      {PC}             ;; return
     91          

   \                                 In section .text, align 2, keep-with-next
     92          void ADC1_2_IRQHandler(void) {
   \                     ADC1_2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     93              if(ADC_GetITStatus(ADC1, ADC_IT_EOC)!=RESET){
   \   00000002   0xF44F 0x7108      MOV      R1,#+544
   \   00000006   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000008   0x.... 0x....      BL       ADC_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD009             BEQ.N    ??ADC1_2_IRQHandler_0
     94                  value = ADC_GetConversionValue(ADC1);
   \   00000010   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000012   0x.... 0x....      BL       ADC_GetConversionValue
   \   00000016   0x....             LDR.N    R1,??DataTable4_5
   \   00000018   0x8008             STRH     R0,[R1, #+0]
     95            
     96                  ADC_ClearITPendingBit(ADC1,ADC_IT_EOC);
   \   0000001A   0xF44F 0x7108      MOV      R1,#+544
   \   0000001E   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000020   0x.... 0x....      BL       ADC_ClearITPendingBit
     97              }
     98          }
   \                     ??ADC1_2_IRQHandler_0: (+1)
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
     99          
    100          

   \                                 In section .text, align 2, keep-with-next
    101          int main(void) {
   \                     main: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    102              
    103              SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
    104              RCC_Configure();
   \   00000006   0x.... 0x....      BL       RCC_Configure
    105              GPIO_Configure();
   \   0000000A   0x.... 0x....      BL       GPIO_Configure
    106              ADC_Configure();
   \   0000000E   0x.... 0x....      BL       ADC_Configure
    107              NVIC_Configure();
   \   00000012   0x.... 0x....      BL       NVIC_Configure
    108          
    109              LCD_Init();
   \   00000016   0x.... 0x....      BL       LCD_Init
    110              Touch_Configuration();
   \   0000001A   0x.... 0x....      BL       Touch_Configuration
    111              Touch_Adjust();
   \   0000001E   0x.... 0x....      BL       Touch_Adjust
    112              LCD_Clear(WHITE);
   \   00000022   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000026   0x.... 0x....      BL       LCD_Clear
    113              
    114              LCD_ShowString(LCD_TEAM_NAME_X, LCD_TEAM_NAME_Y, "WED_Team02", BLACK, WHITE);
   \   0000002A   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x2300             MOVS     R3,#+0
   \   00000032   0x....             LDR.N    R2,??DataTable4_6
   \   00000034   0x2132             MOVS     R1,#+50
   \   00000036   0x2028             MOVS     R0,#+40
   \   00000038   0x.... 0x....      BL       LCD_ShowString
    115              LCD_ShowString(LCD_COORD_X_X - 17, LCD_COORD_X_Y, "X: ", BLACK, WHITE);
   \   0000003C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0x....             ADR.N    R2,??DataTable4  ;; "X: "
   \   00000046   0x2150             MOVS     R1,#+80
   \   00000048   0x2053             MOVS     R0,#+83
   \   0000004A   0x.... 0x....      BL       LCD_ShowString
    116              LCD_ShowString(LCD_COORD_Y_X - 17, LCD_COORD_Y_Y, "Y: ", BLACK, WHITE);
   \   0000004E   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000052   0x9000             STR      R0,[SP, #+0]
   \   00000054   0x2300             MOVS     R3,#+0
   \   00000056   0x....             ADR.N    R2,??DataTable4_1  ;; "Y: "
   \   00000058   0x2164             MOVS     R1,#+100
   \   0000005A   0x2053             MOVS     R0,#+83
   \   0000005C   0x.... 0x....      BL       LCD_ShowString
    117              
    118              while (1) {
    119                  Touch_GetXY(&cur_x, &cur_y, 1);
   \                     ??main_0: (+1)
   \   00000060   0x2201             MOVS     R2,#+1
   \   00000062   0x....             LDR.N    R1,??DataTable4_7
   \   00000064   0x....             LDR.N    R0,??DataTable4_8
   \   00000066   0x.... 0x....      BL       Touch_GetXY
    120                  Convert_Pos(cur_x, cur_y, &pixel_x, &pixel_y);
   \   0000006A   0x....             LDR.N    R3,??DataTable4_9
   \   0000006C   0x....             LDR.N    R2,??DataTable4_10
   \   0000006E   0x....             LDR.N    R0,??DataTable4_7
   \   00000070   0x8801             LDRH     R1,[R0, #+0]
   \   00000072   0x....             LDR.N    R0,??DataTable4_8
   \   00000074   0x8800             LDRH     R0,[R0, #+0]
   \   00000076   0x.... 0x....      BL       Convert_Pos
    121          
    122                  LCD_DrawCircle(pixel_x, pixel_y, 3);
   \   0000007A   0x2203             MOVS     R2,#+3
   \   0000007C   0x....             LDR.N    R0,??DataTable4_9
   \   0000007E   0x8801             LDRH     R1,[R0, #+0]
   \   00000080   0x....             LDR.N    R0,??DataTable4_10
   \   00000082   0x8800             LDRH     R0,[R0, #+0]
   \   00000084   0x.... 0x....      BL       LCD_DrawCircle
    123                  LCD_ShowNum(LCD_COORD_X_X, LCD_COORD_X_Y, pixel_x, 4, BLACK, WHITE);
   \   00000088   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000008C   0x9001             STR      R0,[SP, #+4]
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x9000             STR      R0,[SP, #+0]
   \   00000092   0x2304             MOVS     R3,#+4
   \   00000094   0x....             LDR.N    R0,??DataTable4_10
   \   00000096   0x8802             LDRH     R2,[R0, #+0]
   \   00000098   0x2150             MOVS     R1,#+80
   \   0000009A   0x2064             MOVS     R0,#+100
   \   0000009C   0x.... 0x....      BL       LCD_ShowNum
    124                  LCD_ShowNum(LCD_COORD_Y_X, LCD_COORD_Y_Y, pixel_y, 4, BLACK, WHITE);
   \   000000A0   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000A4   0x9001             STR      R0,[SP, #+4]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x9000             STR      R0,[SP, #+0]
   \   000000AA   0x2304             MOVS     R3,#+4
   \   000000AC   0x....             LDR.N    R0,??DataTable4_9
   \   000000AE   0x8802             LDRH     R2,[R0, #+0]
   \   000000B0   0x2164             MOVS     R1,#+100
   \   000000B2   0x2064             MOVS     R0,#+100
   \   000000B4   0x.... 0x....      BL       LCD_ShowNum
    125                  LCD_ShowNum(LCD_LUX_VAL_X, LCD_LUX_VAL_Y, value, 4, BLUE, WHITE);
   \   000000B8   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000BC   0x9001             STR      R0,[SP, #+4]
   \   000000BE   0x201F             MOVS     R0,#+31
   \   000000C0   0x9000             STR      R0,[SP, #+0]
   \   000000C2   0x2304             MOVS     R3,#+4
   \   000000C4   0x....             LDR.N    R0,??DataTable4_5
   \   000000C6   0x8802             LDRH     R2,[R0, #+0]
   \   000000C8   0x2182             MOVS     R1,#+130
   \   000000CA   0x2046             MOVS     R0,#+70
   \   000000CC   0x.... 0x....      BL       LCD_ShowNum
   \   000000D0   0xE7C6             B.N      ??main_0
    126          
    127          
    128              }
    129              return 0;
                     ^
Warning[Pe111]: statement is unreachable
    130          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x58 0x3A          DC8      "X: "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x59 0x3A          DC8      "Y: "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40012400         DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     cur_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     cur_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     pixel_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     pixel_x

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x57 0x45          DC8 "WED_Team02"
   \              0x44 0x5F    
   \              0x54 0x65    
   \              0x61 0x6D    
   \              0x30 0x32    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x58 0x3A          DC8 "X: "
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x59 0x3A          DC8 "Y: "
   \              0x20 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ADC1_2_IRQHandler
         8   -> ADC_ClearITPendingBit
         8   -> ADC_GetConversionValue
         8   -> ADC_GetITStatus
      24   ADC_Configure
        24   -> ADC_Cmd
        24   -> ADC_GetCalibrationStatus
        24   -> ADC_GetResetCalibrationStatus
        24   -> ADC_ITConfig
        24   -> ADC_Init
        24   -> ADC_RegularChannelConfig
        24   -> ADC_ResetCalibration
        24   -> ADC_SoftwareStartConvCmd
        24   -> ADC_StartCalibration
       8   GPIO_Configure
         8   -> GPIO_Init
       8   NVIC_Configure
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
         8   -> __NVIC_EnableIRQ
       8   RCC_Configure
         8   -> RCC_APB2PeriphClockCmd
       0   __NVIC_EnableIRQ
      16   main
        16   -> ADC_Configure
        16   -> Convert_Pos
        16   -> GPIO_Configure
        16   -> LCD_Clear
        16   -> LCD_DrawCircle
        16   -> LCD_Init
        16   -> LCD_ShowNum
        16   -> LCD_ShowString
        16   -> NVIC_Configure
        16   -> RCC_Configure
        16   -> SystemInit
        16   -> Touch_Adjust
        16   -> Touch_Configuration
        16   -> Touch_GetXY


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      12  ?_0
       4  ?_1
       4  ?_2
      38  ADC1_2_IRQHandler
     120  ADC_Configure
      30  GPIO_Configure
      48  NVIC_Configure
      46  RCC_Configure
      28  __NVIC_EnableIRQ
      48  color
       2  cur_x
       2  cur_y
     210  main
       2  pixel_x
       2  pixel_y
       2  value

 
  10 bytes in section .bss
  48 bytes in section .data
  20 bytes in section .rodata
 564 bytes in section .text
 
 564 bytes of CODE  memory
  20 bytes of CONST memory
  58 bytes of DATA  memory

Errors: none
Warnings: 1
