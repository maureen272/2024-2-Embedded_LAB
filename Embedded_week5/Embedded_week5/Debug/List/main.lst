###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       04/Oct/2024  21:25:01
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\pnu2\Documents\Embedded_week5\user\main.c
#    Command line =  
#        -f C:\Users\pnu2\AppData\Local\Temp\EWD5F.tmp
#        (C:\Users\pnu2\Documents\Embedded_week5\user\main.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu2\Documents\Embedded_week5\Debug\List -o
#        C:\Users\pnu2\Documents\Embedded_week5\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu2\Documents\Embedded_week5\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu2\Documents\Embedded_week5\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu2\Documents\Embedded_week5\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu2\Documents\Embedded_week5\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu2\Documents\Embedded_week5\user\ -I
#        C:\Users\pnu2\Documents\Embedded_week5\user\inc\ -Ol -I "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  C:\Users\pnu2\Documents\Embedded_week5\Debug\List\main.lst
#    Object file  =  C:\Users\pnu2\Documents\Embedded_week5\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu2\Documents\Embedded_week5\user\main.c
      1          #include "stm32f10x.h"
      2          

   \                                 In section .text, align 2, keep-with-next
      3          void SysInit(void) {
   \                     SysInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      4              printf("SysInit start");
                     ^
Warning[Pe223]: function "printf" declared implicitly
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7
   \   00000006   0x.... 0x....      BL       printf
      5              /* Set HSION bit */
      6              /* Internal Clock Enable */
      7              RCC->CR |= (uint32_t)0x00000001; //HSION
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable7_1  ;; 0x40021000
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable7_1  ;; 0x40021000
   \   00000018   0x6008             STR      R0,[R1, #+0]
      8          
      9              /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
     10              RCC->CFGR &= (uint32_t)0xF0FF0000;
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x40021004
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable7_3  ;; 0xf0ff0000
   \   00000024   0x4001             ANDS     R1,R0,R1
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x40021004
   \   0000002A   0x6001             STR      R1,[R0, #+0]
     11          
     12              /* Reset HSEON, CSSON and PLLON bits */
     13              RCC->CR &= (uint32_t)0xFEF6FFFF;
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable7_1  ;; 0x40021000
   \   00000030   0x6801             LDR      R1,[R0, #+0]
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable7_4  ;; 0xfef6ffff
   \   00000036   0x4001             ANDS     R1,R0,R1
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable7_1  ;; 0x40021000
   \   0000003C   0x6001             STR      R1,[R0, #+0]
     14          
     15              /* Reset HSEBYP bit */
     16              RCC->CR &= (uint32_t)0xFFFBFFFF;
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable7_1  ;; 0x40021000
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF430 0x2080      BICS     R0,R0,#0x40000
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable7_1  ;; 0x40021000
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     17          
     18              /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
     19              RCC->CFGR &= (uint32_t)0xFF80FFFF;
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x40021004
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0xF430 0x00FE      BICS     R0,R0,#0x7F0000
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable7_2  ;; 0x40021004
   \   0000005C   0x6008             STR      R0,[R1, #+0]
     20          
     21              /* Reset PLL2ON and PLL3ON bits */
     22              RCC->CR &= (uint32_t)0xEBFFFFFF;
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable7_1  ;; 0x40021000
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF030 0x50A0      BICS     R0,R0,#0x14000000
   \   00000068   0x....             LDR.N    R1,??DataTable7_1  ;; 0x40021000
   \   0000006A   0x6008             STR      R0,[R1, #+0]
     23          
     24              /* Disable all interrupts and clear pending bits  */
     25              RCC->CIR = 0x00FF0000;
   \   0000006C   0xF45F 0x007F      MOVS     R0,#+16711680
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable7_5  ;; 0x40021008
   \   00000074   0x6008             STR      R0,[R1, #+0]
     26          
     27              /* Reset CFGR2 register */
     28              RCC->CFGR2 = 0x00000000;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable7_6  ;; 0x4002102c
   \   0000007C   0x6008             STR      R0,[R1, #+0]
     29              printf("SysInit end");
   \   0000007E   0x....             LDR.N    R0,??DataTable7_7
   \   00000080   0x.... 0x....      BL       printf
     30          }
   \   00000084   0xBD01             POP      {R0,PC}          ;; return
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void SetSysClock(void) {
   \                     SetSysClock: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     33              printf("SetSysClock start");
                     ^
Warning[Pe223]: function "printf" declared implicitly
   \   00000002   0x....             LDR.N    R0,??DataTable7_8
   \   00000004   0x.... 0x....      BL       printf
     34              volatile uint32_t StartUpCounter = 0, HSEStatus = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9000             STR      R0,[SP, #+0]
     35              /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
     36              /* Enable HSE */
     37              RCC->CR |= ((uint32_t)RCC_CR_HSEON);
   \   00000010   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40021000
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000018   0x....             LDR.N    R1,??DataTable7_1  ;; 0x40021000
   \   0000001A   0x6008             STR      R0,[R1, #+0]
     38              /* Wait till HSE is ready and if Time out is reached exit */
     39              do {
     40                  HSEStatus = RCC->CR & RCC_CR_HSERDY;
   \                     ??SetSysClock_0: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40021000
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF410 0x3000      ANDS     R0,R0,#0x20000
   \   00000024   0x9000             STR      R0,[SP, #+0]
     41                  StartUpCounter++;
   \   00000026   0x9801             LDR      R0,[SP, #+4]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x9001             STR      R0,[SP, #+4]
     42              } while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD103             BNE.N    ??SetSysClock_1
   \   00000032   0x9801             LDR      R0,[SP, #+4]
   \   00000034   0xF5B0 0x6FA0      CMP      R0,#+1280
   \   00000038   0xD1F0             BNE.N    ??SetSysClock_0
     43          
     44              if ((RCC->CR & RCC_CR_HSERDY) != RESET) {
   \                     ??SetSysClock_1: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40021000
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0380             LSLS     R0,R0,#+14
   \   00000040   0xD502             BPL.N    ??SetSysClock_2
     45                  HSEStatus = (uint32_t)0x01;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0xE001             B.N      ??SetSysClock_3
     46              }
     47              else {
     48                  HSEStatus = (uint32_t)0x00;
   \                     ??SetSysClock_2: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x9000             STR      R0,[SP, #+0]
     49              }
     50          
     51              if (HSEStatus == (uint32_t)0x01) {
   \                     ??SetSysClock_3: (+1)
   \   0000004C   0x9800             LDR      R0,[SP, #+0]
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xD167             BNE.N    ??SetSysClock_4
     52                  /* Enable Prefetch Buffer */
     53                  FLASH->ACR |= FLASH_ACR_PRFTBE;
   \   00000052   0x....             LDR.N    R0,??DataTable7_9  ;; 0x40022000
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000005A   0x....             LDR.N    R1,??DataTable7_9  ;; 0x40022000
   \   0000005C   0x6008             STR      R0,[R1, #+0]
     54                  /* Flash 0 wait state */
     55                  FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
   \   0000005E   0x....             LDR.N    R0,??DataTable7_9  ;; 0x40022000
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x0880             LSRS     R0,R0,#+2
   \   00000064   0x0080             LSLS     R0,R0,#+2
   \   00000066   0x....             LDR.N    R1,??DataTable7_9  ;; 0x40022000
   \   00000068   0x6008             STR      R0,[R1, #+0]
     56                  FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
   \   0000006A   0x....             LDR.N    R0,??DataTable7_9  ;; 0x40022000
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x....             LDR.N    R1,??DataTable7_9  ;; 0x40022000
   \   00000070   0x6008             STR      R0,[R1, #+0]
     57          
     58          //@TODO - 1 Set the clock, (//) @@ @@@ @@@ @@ @@ @@@ @@@ @ @@@ @@@@@
     59                  /* HCLK = SYSCLK */
     60                  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
   \   00000072   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40021004
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40021004
   \   00000078   0x6008             STR      R0,[R1, #+0]
     61                  /* PCLK2 = HCLK / ?, use PPRE2 */
     62                  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV2;//
   \   0000007A   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40021004
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000082   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40021004
   \   00000084   0x6008             STR      R0,[R1, #+0]
     63                  // have to be sysclock == pclk2.
     64                  // pclk2 has to be 26, sysclock is 52
     65                  // => divide 2
     66                  /* PCLK1 = HCLK */
     67                  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
   \   00000086   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40021004
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40021004
   \   0000008C   0x6008             STR      R0,[R1, #+0]
     68          
     69                  /* Configure PLLs ------------------------------------------------------*/
     70                  RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
   \   0000008E   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40021004
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0xF430 0x1074      BICS     R0,R0,#0x3D0000
   \   00000096   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40021004
   \   00000098   0x6008             STR      R0,[R1, #+0]
     71                  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL4); //
   \   0000009A   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40021004
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0xF450 0x2010      ORRS     R0,R0,#0x90000
   \   000000A2   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40021004
   \   000000A4   0x6008             STR      R0,[R1, #+0]
     72                  // route going through prediv1 input -> mux(pllscr) -> pllmul
     73                  // multiple 4 in PLLMUL register
     74          
     75                  RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL | RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
   \   000000A6   0x....             LDR.N    R0,??DataTable7_6  ;; 0x4002102c
   \   000000A8   0x6801             LDR      R1,[R0, #+0]
   \   000000AA   0x....             LDR.N    R0,??DataTable7_10  ;; 0xfffef000
   \   000000AC   0x4001             ANDS     R1,R0,R1
   \   000000AE   0x....             LDR.N    R0,??DataTable7_6  ;; 0x4002102c
   \   000000B0   0x6001             STR      R1,[R0, #+0]
     76                  RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL13 | RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5); //
   \   000000B2   0x....             LDR.N    R0,??DataTable7_6  ;; 0x4002102c
   \   000000B4   0x6801             LDR      R1,[R0, #+0]
   \   000000B6   0x....             LDR.N    R0,??DataTable7_11  ;; 0x10b44
   \   000000B8   0x4301             ORRS     R1,R0,R1
   \   000000BA   0x....             LDR.N    R0,??DataTable7_6  ;; 0x4002102c
   \   000000BC   0x6001             STR      R1,[R0, #+0]
     77                  //route going through prediv2 -> pll2mul -> mux(prediv1scr) -> prediv1
     78                  // divide 5, multiple 13, divide 5
     79          //@End of TODO - 1
     80          
     81                  /* Enable PLL2 */
     82                  RCC->CR |= RCC_CR_PLL2ON;
   \   000000BE   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40021000
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0xF050 0x6080      ORRS     R0,R0,#0x4000000
   \   000000C6   0x....             LDR.N    R1,??DataTable7_1  ;; 0x40021000
   \   000000C8   0x6008             STR      R0,[R1, #+0]
     83                  /* Wait till PLL2 is ready */
     84                  while ((RCC->CR & RCC_CR_PLL2RDY) == 0)
   \                     ??SetSysClock_5: (+1)
   \   000000CA   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40021000
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0x0100             LSLS     R0,R0,#+4
   \   000000D0   0xD5FB             BPL.N    ??SetSysClock_5
     85                  {
     86                  }
     87                  /* Enable PLL */
     88                  RCC->CR |= RCC_CR_PLLON;
   \   000000D2   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40021000
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   000000DA   0x....             LDR.N    R1,??DataTable7_1  ;; 0x40021000
   \   000000DC   0x6008             STR      R0,[R1, #+0]
     89                  /* Wait till PLL is ready */
     90                  while ((RCC->CR & RCC_CR_PLLRDY) == 0)
   \                     ??SetSysClock_6: (+1)
   \   000000DE   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40021000
   \   000000E0   0x6800             LDR      R0,[R0, #+0]
   \   000000E2   0x0180             LSLS     R0,R0,#+6
   \   000000E4   0xD5FB             BPL.N    ??SetSysClock_6
     91                  {
     92                  }
     93                  /* Select PLL as system clock source */
     94                  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
   \   000000E6   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40021004
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0x0880             LSRS     R0,R0,#+2
   \   000000EC   0x0080             LSLS     R0,R0,#+2
   \   000000EE   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40021004
   \   000000F0   0x6008             STR      R0,[R1, #+0]
     95                  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
   \   000000F2   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40021004
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000FA   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40021004
   \   000000FC   0x6008             STR      R0,[R1, #+0]
     96                  /* Wait till PLL is used as system clock source */
     97                  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
   \                     ??SetSysClock_7: (+1)
   \   000000FE   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40021004
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0xF010 0x000C      ANDS     R0,R0,#0xC
   \   00000106   0x2808             CMP      R0,#+8
   \   00000108   0xD1F9             BNE.N    ??SetSysClock_7
     98                  {
     99                  }
    100                  /* Select System Clock as output of MCO */
    101          //@TODO - 2 Set the MCO port for system clock output
    102                  RCC->CFGR &= ~(uint32_t)RCC_CFGR_MCO;
   \   0000010A   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40021004
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0xF030 0x6070      BICS     R0,R0,#0xF000000
   \   00000112   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40021004
   \   00000114   0x6008             STR      R0,[R1, #+0]
    103                  RCC->CFGR |= (uint32_t)RCC_CFGR_MCO_SYSCLK; //
   \   00000116   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40021004
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0xF050 0x6080      ORRS     R0,R0,#0x4000000
   \   0000011E   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40021004
   \   00000120   0x6008             STR      R0,[R1, #+0]
    104                  // !< System clock selected as MCO source  - stm32f10x.h
    105          //@End of TODO - 2
    106              }
    107              else {
    108                  /* If HSE fails to start-up, the application will have wrong clock
    109                  configuration. User can add here some code to deal with this error */
    110              }
    111              printf("SetSysClock end");
   \                     ??SetSysClock_4: (+1)
   \   00000122   0x....             LDR.N    R0,??DataTable7_12
   \   00000124   0x.... 0x....      BL       printf
    112          }
   \   00000128   0xBD07             POP      {R0-R2,PC}       ;; return
    113          

   \                                 In section .text, align 2, keep-with-next
    114          void RCC_Enable(void) {
   \                     RCC_Enable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    115              printf("RCC_Enable start");
                     ^
Warning[Pe223]: function "printf" declared implicitly
   \   00000002   0x....             LDR.N    R0,??DataTable7_13
   \   00000004   0x.... 0x....      BL       printf
    116          //@TODO - 3 RCC Setting
    117              /*---------------------------- RCC Configuration -----------------------------*/
    118              /* GPIO RCC Enable  */
    119              /* UART Tx, Rx, MCO port */
    120              RCC->APB2ENR |= (uint32_t)RCC_APB2ENR_IOPAEN; //
   \   00000008   0x....             LDR.N    R0,??DataTable7_14  ;; 0x40021018
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000010   0x....             LDR.N    R1,??DataTable7_14  ;; 0x40021018
   \   00000012   0x6008             STR      R0,[R1, #+0]
    121              // port A => Tx, Rx exists
    122              /* USART RCC Enable */
    123              RCC->APB2ENR |= (uint32_t)RCC_APB2ENR_USART1EN; //
   \   00000014   0x....             LDR.N    R0,??DataTable7_14  ;; 0x40021018
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   0000001C   0x....             LDR.N    R1,??DataTable7_14  ;; 0x40021018
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    124             /* User S1 Button RCC Enable */
    125              RCC->APB2ENR |= (uint32_t)RCC_APB2ENR_IOPCEN; //
   \   00000020   0x....             LDR.N    R0,??DataTable7_14  ;; 0x40021018
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000028   0x....             LDR.N    R1,??DataTable7_14  ;; 0x40021018
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    126              // key 1 botton on port c
    127              printf("RCC_Enable end");
   \   0000002C   0x....             LDR.N    R0,??DataTable7_15
   \   0000002E   0x.... 0x....      BL       printf
    128          }
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
    129          

   \                                 In section .text, align 2, keep-with-next
    130          void PortConfiguration(void) {
   \                     PortConfiguration: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    131          //@TODO - 4 GPIO Configuration
    132              /* Reset(Clear) Port A CRH - MCO, USART1 TX,RX*/
    133              printf("PortConfiguration start");
                     ^
Warning[Pe223]: function "printf" declared implicitly
   \   00000002   0x....             LDR.N    R0,??DataTable7_16
   \   00000004   0x.... 0x....      BL       printf
    134              GPIOA->CRH &= ~(
    135                 (GPIO_CRH_CNF8 | GPIO_CRH_MODE8) |
    136                 (GPIO_CRH_CNF9 | GPIO_CRH_MODE9) |
    137                 (GPIO_CRH_CNF10 | GPIO_CRH_MODE10)
    138             );
   \   00000008   0x....             LDR.N    R0,??DataTable7_17  ;; 0x40010804
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x0B00             LSRS     R0,R0,#+12
   \   0000000E   0x0300             LSLS     R0,R0,#+12
   \   00000010   0x....             LDR.N    R1,??DataTable7_17  ;; 0x40010804
   \   00000012   0x6008             STR      R0,[R1, #+0]
    139              /* MCO Pin Configuration */
    140              GPIOA->CRH |= (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_MODE8_0); // 
   \   00000014   0x....             LDR.N    R0,??DataTable7_17  ;; 0x40010804
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF050 0x000B      ORRS     R0,R0,#0xB
   \   0000001C   0x....             LDR.N    R1,??DataTable7_17  ;; 0x40010804
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    141              //cnf bit= 10(push-pull), mode bit = 11(max 50MHz) 
    142              /* USART Pin Configuration */
    143              GPIOA->CRH |= (GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0
    144                             | GPIO_CRH_CNF10_1); //
   \   00000020   0x....             LDR.N    R0,??DataTable7_17  ;; 0x40010804
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF450 0x600B      ORRS     R0,R0,#0x8B0
   \   00000028   0x....             LDR.N    R1,??DataTable7_17  ;; 0x40010804
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    145              // port 9 => tx(output, push-pull, mode 11), port 10 => rx(input)
    146              
    147              /* Reset(Clear) Port C CRL - User S1 Button */
    148              GPIOC->CRL &= ~(GPIO_CRL_CNF4 | GPIO_CRL_MODE4); // 
   \   0000002C   0x....             LDR.N    R0,??DataTable7_18  ;; 0x40011000
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF430 0x2070      BICS     R0,R0,#0xF0000
   \   00000034   0x....             LDR.N    R1,??DataTable7_18  ;; 0x40011000
   \   00000036   0x6008             STR      R0,[R1, #+0]
    149              /* User S1 Button Configuration */
    150              GPIOC->CRL |= (GPIO_CRL_CNF4_1); // 
   \   00000038   0x....             LDR.N    R0,??DataTable7_18  ;; 0x40011000
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000040   0x....             LDR.N    R1,??DataTable7_18  ;; 0x40011000
   \   00000042   0x6008             STR      R0,[R1, #+0]
    151              printf("PortConfiguration end");
   \   00000044   0x....             LDR.N    R0,??DataTable7_19
   \   00000046   0x.... 0x....      BL       printf
    152          }
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
    153          

   \                                 In section .text, align 2, keep-with-next
    154          void UartInit(void) {
   \                     UartInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    155              printf("UartInit start");
                     ^
Warning[Pe223]: function "printf" declared implicitly
   \   00000002   0x....             LDR.N    R0,??DataTable7_20
   \   00000004   0x.... 0x....      BL       printf
    156              /*---------------------------- USART CR1 Configuration -----------------------*/
    157              /* Clear M, PCE, PS, TE and RE bits */
    158              USART1->CR1 &= ~(uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE);
   \   00000008   0x....             LDR.N    R0,??DataTable7_21  ;; 0x4001380c
   \   0000000A   0x8801             LDRH     R1,[R0, #+0]
   \   0000000C   0xF64E 0x10F3      MOVW     R0,#+59891
   \   00000010   0x4001             ANDS     R1,R0,R1
   \   00000012   0x....             LDR.N    R0,??DataTable7_21  ;; 0x4001380c
   \   00000014   0x8001             STRH     R1,[R0, #+0]
    159              /* Configure the USART Word Length, Parity and mode ----------------------- */
    160              /* Set the M bits according to USART_WordLength value */
    161          //@TODO - 6: WordLength : 8bit
    162              USART1->CR1 &= ~(uint32_t)(USART_CR1_M);  //
   \   00000016   0x....             LDR.N    R0,??DataTable7_21  ;; 0x4001380c
   \   00000018   0x8801             LDRH     R1,[R0, #+0]
   \   0000001A   0xF64E 0x70FF      MOVW     R0,#+61439
   \   0000001E   0x4001             ANDS     R1,R0,R1
   \   00000020   0x....             LDR.N    R0,??DataTable7_21  ;; 0x4001380c
   \   00000022   0x8001             STRH     R1,[R0, #+0]
    163              // header file => default word length == 8(0x1000)
    164              
    165              /* Set PCE and PS bits according to USART_Parity value */
    166          //@TODO - 7: Parity : None
    167              USART1->CR1 &= ~(uint32_t)(USART_CR1_PCE); //
   \   00000024   0x....             LDR.N    R0,??DataTable7_21  ;; 0x4001380c
   \   00000026   0x8801             LDRH     R1,[R0, #+0]
   \   00000028   0xF64F 0x30FF      MOVW     R0,#+64511
   \   0000002C   0x4001             ANDS     R1,R0,R1
   \   0000002E   0x....             LDR.N    R0,??DataTable7_21  ;; 0x4001380c
   \   00000030   0x8001             STRH     R1,[R0, #+0]
    168              //to set parity none : nothing
    169              
    170              /* Set TE and RE bits according to USART_Mode value */
    171          //@TODO - 8: Enable Tx and Rx
    172              USART1->CR1 |= (uint32_t)(USART_CR1_TE | USART_CR1_RE); // 
   \   00000032   0x....             LDR.N    R0,??DataTable7_21  ;; 0x4001380c
   \   00000034   0x8800             LDRH     R0,[R0, #+0]
   \   00000036   0xF050 0x000C      ORRS     R0,R0,#0xC
   \   0000003A   0x....             LDR.N    R1,??DataTable7_21  ;; 0x4001380c
   \   0000003C   0x8008             STRH     R0,[R1, #+0]
    173          
    174              /*---------------------------- USART CR2 Configuration -----------------------*/
    175              /* Clear STOP[13:12] bits */
    176              USART1->CR2 &= ~(uint32_t)(USART_CR2_STOP);
   \   0000003E   0x....             LDR.N    R0,??DataTable7_22  ;; 0x40013810
   \   00000040   0x8801             LDRH     R1,[R0, #+0]
   \   00000042   0xF64C 0x70FF      MOVW     R0,#+53247
   \   00000046   0x4001             ANDS     R1,R0,R1
   \   00000048   0x....             LDR.N    R0,??DataTable7_22  ;; 0x40013810
   \   0000004A   0x8001             STRH     R1,[R0, #+0]
    177              /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
    178              USART1->CR2 &= ~(uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN);
   \   0000004C   0x....             LDR.N    R0,??DataTable7_22  ;; 0x40013810
   \   0000004E   0x8801             LDRH     R1,[R0, #+0]
   \   00000050   0xF24F 0x10FF      MOVW     R0,#+61951
   \   00000054   0x4001             ANDS     R1,R0,R1
   \   00000056   0x....             LDR.N    R0,??DataTable7_22  ;; 0x40013810
   \   00000058   0x8001             STRH     R1,[R0, #+0]
    179              /* Set STOP[13:12] bits according to USART_StopBits value */
    180          //@TODO - 9: Stop bit : 1bit
    181              USART1->CR2 &= ~(uint32_t)(USART_CR2_STOP); //
   \   0000005A   0x....             LDR.N    R0,??DataTable7_22  ;; 0x40013810
   \   0000005C   0x8801             LDRH     R1,[R0, #+0]
   \   0000005E   0xF64C 0x70FF      MOVW     R0,#+53247
   \   00000062   0x4001             ANDS     R1,R0,R1
   \   00000064   0x....             LDR.N    R0,??DataTable7_22  ;; 0x40013810
   \   00000066   0x8001             STRH     R1,[R0, #+0]
    182          
    183              /*---------------------------- USART CR3 Configuration -----------------------*/
    184              /* Clear CTSE and RTSE bits */
    185              USART1->CR3 &= ~(uint32_t)(USART_CR3_CTSE | USART_CR3_RTSE);
   \   00000068   0x....             LDR.N    R0,??DataTable7_23  ;; 0x40013814
   \   0000006A   0x8801             LDRH     R1,[R0, #+0]
   \   0000006C   0xF64F 0x40FF      MOVW     R0,#+64767
   \   00000070   0x4001             ANDS     R1,R0,R1
   \   00000072   0x....             LDR.N    R0,??DataTable7_23  ;; 0x40013814
   \   00000074   0x8001             STRH     R1,[R0, #+0]
    186              /* Configure the USART HFC -------------------------------------------------*/
    187              /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
    188          //@TODO - 10: CTS, RTS : disable
    189              USART1->CR3 &= ~(uint32_t)(USART_CR3_CTSE | USART_CR3_RTSE); //
   \   00000076   0x....             LDR.N    R0,??DataTable7_23  ;; 0x40013814
   \   00000078   0x8801             LDRH     R1,[R0, #+0]
   \   0000007A   0xF64F 0x40FF      MOVW     R0,#+64767
   \   0000007E   0x4001             ANDS     R1,R0,R1
   \   00000080   0x....             LDR.N    R0,??DataTable7_23  ;; 0x40013814
   \   00000082   0x8001             STRH     R1,[R0, #+0]
    190          
    191          
    192              /*---------------------------- USART BRR Configuration -----------------------*/
    193              /* Configure the USART Baud Rate -------------------------------------------*/
    194              /* Determine the integer part */
    195              /* Determine the fractional part */
    196          //@TODO - 11: Calculate & configure BRR
    197              USART1->BRR |= 0xA94; // 
   \   00000084   0x....             LDR.N    R0,??DataTable7_24  ;; 0x40013808
   \   00000086   0x8801             LDRH     R1,[R0, #+0]
   \   00000088   0xF640 0x2094      MOVW     R0,#+2708
   \   0000008C   0x4301             ORRS     R1,R0,R1
   \   0000008E   0x....             LDR.N    R0,??DataTable7_24  ;; 0x40013808
   \   00000090   0x8001             STRH     R1,[R0, #+0]
    198              // ppt p.21
    199          
    200              /*---------------------------- USART Enable ----------------------------------*/
    201              /* USART Enable Configuration */
    202          //@TODO - 12: Enable UART (UE)
    203              USART1->CR1 |= USART_CR1_UE;// 
   \   00000092   0x....             LDR.N    R0,??DataTable7_21  ;; 0x4001380c
   \   00000094   0x8800             LDRH     R0,[R0, #+0]
   \   00000096   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   0000009A   0x....             LDR.N    R1,??DataTable7_21  ;; 0x4001380c
   \   0000009C   0x8008             STRH     R0,[R1, #+0]
    204              printf("UartInit end");
   \   0000009E   0x....             LDR.N    R0,??DataTable7_25
   \   000000A0   0x.... 0x....      BL       printf
    205          }
   \   000000A4   0xBD01             POP      {R0,PC}          ;; return
    206          

   \                                 In section .text, align 2, keep-with-next
    207          void delay(void){
    208              int i = 0;
   \                     delay: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    209              for(i=0;i<1000000;i++);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xE000             B.N      ??delay_0
   \                     ??delay_1: (+1)
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \                     ??delay_0: (+1)
   \   00000008   0x....             LDR.N    R1,??DataTable7_26  ;; 0xf4240
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xDBFB             BLT.N    ??delay_1
    210          }
   \   0000000E   0x4770             BX       LR               ;; return
    211          

   \                                 In section .text, align 2, keep-with-next
    212          void SendData(uint16_t data) {
   \                     SendData: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    213             printf("SendData start\n");
                    ^
Warning[Pe223]: function "printf" declared implicitly
   \   00000004   0x....             LDR.N    R0,??DataTable7_27
   \   00000006   0x.... 0x....      BL       printf
    214              /* Transmit Data */
    215             USART1->DR = data;
   \   0000000A   0x....             LDR.N    R0,??DataTable7_28  ;; 0x40013804
   \   0000000C   0x8004             STRH     R4,[R0, #+0]
    216          
    217             /* Wait till TC is set */
    218             while ((USART1->SR & USART_SR_TC) == 0);
   \                     ??SendData_0: (+1)
   \   0000000E   0x....             LDR.N    R0,??DataTable7_29  ;; 0x40013800
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x0640             LSLS     R0,R0,#+25
   \   00000014   0xD5FB             BPL.N    ??SendData_0
    219             printf("SendData end\n");
   \   00000016   0x....             LDR.N    R0,??DataTable7_30
   \   00000018   0x.... 0x....      BL       printf
    220          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    221          

   \                                 In section .text, align 2, keep-with-next
    222          int main() {
   \                     main: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
    223             printf("Hello world");
                    ^
Warning[Pe223]: function "printf" declared implicitly
   \   00000002   0x....             LDR.N    R0,??DataTable7_31
   \   00000004   0x.... 0x....      BL       printf
    224             int i;
    225             char msg[] = "Hello Team02\r\n";
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x....             LDR.N    R1,??DataTable7_32
   \   0000000C   0x2210             MOVS     R2,#+16
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy4
    226             
    227              SysInit();
   \   00000012   0x.... 0x....      BL       SysInit
    228              SetSysClock();
   \   00000016   0x.... 0x....      BL       SetSysClock
    229              RCC_Enable();
   \   0000001A   0x.... 0x....      BL       RCC_Enable
    230              PortConfiguration();
   \   0000001E   0x.... 0x....      BL       PortConfiguration
    231              UartInit();
   \   00000022   0x.... 0x....      BL       UartInit
   \   00000026   0xE009             B.N      ??main_0
    232              
    233              // if you need, init pin values here
    234              
    235              
    236              while (1) {
    237                  //@TODO - 13: Send the message when button is pressed
    238                  if ((GPIOA->IDR & GPIO_IDR_IDR0) == 0)
    239                  {
    240                      i = 0;
    241                      char* message = &msg[i];
    242                      while (*message != '\0') {
    243                          SendData(*message);
   \                     ??main_1: (+1)
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0x.... 0x....      BL       SendData
    244                          message++;
   \   00000030   0x1C64             ADDS     R4,R4,#+1
    245                      }
   \                     ??main_2: (+1)
   \   00000032   0x7820             LDRB     R0,[R4, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD1F7             BNE.N    ??main_1
    246                      delay();
   \   00000038   0x.... 0x....      BL       delay
   \                     ??main_0: (+1)
   \   0000003C   0x....             LDR.N    R0,??DataTable7_33  ;; 0x40010808
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x07C0             LSLS     R0,R0,#+31
   \   00000042   0xD4FB             BMI.N    ??main_0
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x4669             MOV      R1,SP
   \   00000048   0xEB01 0x0400      ADD      R4,R1,R0
   \   0000004C   0xE7F1             B.N      ??main_2
    247                  }
    248              }
    249          
    250          }// end main

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40021004         DC32     0x40021004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0xF0FF0000         DC32     0xf0ff0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0xFEF6FFFF         DC32     0xfef6ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x40021008         DC32     0x40021008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x4002102C         DC32     0x4002102c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0xFFFEF000         DC32     0xfffef000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x00010B44         DC32     0x10b44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x40021018         DC32     0x40021018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x40010804         DC32     0x40010804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0x4001380C         DC32     0x4001380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x40013810         DC32     0x40013810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   0x40013814         DC32     0x40013814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_24:
   \   00000000   0x40013808         DC32     0x40013808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_25:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_26:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_27:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_28:
   \   00000000   0x40013804         DC32     0x40013804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_29:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_30:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_31:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_32:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_33:
   \   00000000   0x40010808         DC32     0x40010808

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x53 0x79          DC8 "SysInit start"
   \              0x73 0x49    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x53 0x79          DC8 "SysInit end"
   \              0x73 0x49    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x65 0x6E    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x53 0x65          DC8 "SetSysClock start"
   \              0x74 0x53    
   \              0x79 0x73    
   \              0x43 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x53 0x65          DC8 "SetSysClock end"
   \              0x74 0x53    
   \              0x79 0x73    
   \              0x43 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x65 0x6E    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x52 0x43          DC8 "RCC_Enable start"
   \              0x43 0x5F    
   \              0x45 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x52 0x43          DC8 "RCC_Enable end"
   \              0x43 0x5F    
   \              0x45 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x65    
   \              0x6E 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x50 0x6F          DC8 "PortConfiguration start"
   \              0x72 0x74    
   \              0x43 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x50 0x6F          DC8 "PortConfiguration end"
   \              0x72 0x74    
   \              0x43 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x65 0x6E    
   \              0x64 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x55 0x61          DC8 "UartInit start"
   \              0x72 0x74    
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x55 0x61          DC8 "UartInit end"
   \              0x72 0x74    
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x20 0x65    
   \              0x6E 0x64    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x53 0x65          DC8 "SendData start\012"
   \              0x6E 0x64    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x53 0x65          DC8 "SendData end\012"
   \              0x6E 0x64    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x65    
   \              0x6E 0x64    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x48 0x65          DC8 "Hello world"
   \              0x6C 0x6C    
   \              0x6F 0x20    
   \              0x77 0x6F    
   \              0x72 0x6C    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x48 0x65          DC8 "Hello Team02\015\012"
   \              0x6C 0x6C    
   \              0x6F 0x20    
   \              0x54 0x65    
   \              0x61 0x6D    
   \              0x30 0x32    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   PortConfiguration
         8   -> printf
       8   RCC_Enable
         8   -> printf
       8   SendData
         8   -> printf
      16   SetSysClock
        16   -> printf
       8   SysInit
         8   -> printf
       8   UartInit
         8   -> printf
       0   delay
      24   main
        24   -> PortConfiguration
        24   -> RCC_Enable
        24   -> SendData
        24   -> SetSysClock
        24   -> SysInit
        24   -> UartInit
        24   -> __aeabi_memcpy4
        24   -> delay
        24   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_27
       4  ??DataTable7_28
       4  ??DataTable7_29
       4  ??DataTable7_3
       4  ??DataTable7_30
       4  ??DataTable7_31
       4  ??DataTable7_32
       4  ??DataTable7_33
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      16  ?_0
      12  ?_1
      16  ?_10
      16  ?_11
      12  ?_12
      16  ?_13
      20  ?_2
      16  ?_3
      20  ?_4
      16  ?_5
      24  ?_6
      24  ?_7
      16  ?_8
      16  ?_9
      76  PortConfiguration
      52  RCC_Enable
      30  SendData
     298  SetSysClock
     134  SysInit
     166  UartInit
      16  delay
      78  main

 
 240 bytes in section .rodata
 986 bytes in section .text
 
 986 bytes of CODE  memory
 240 bytes of CONST memory

Errors: none
Warnings: 7
